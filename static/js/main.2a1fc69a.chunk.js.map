{"version":3,"sources":["components/Person/Person.js","components/AddPerson/AddPerson.js","containers/Persons.js","store/actions.js","App.js","registerServiceWorker.js","store/reducer.js","index.js"],"names":["person","props","react_default","a","createElement","className","onClick","clicked","name","age","AddPerson","state","nameChangedHandler","event","_this","setState","target","value","ageChangedHandler","_this2","this","type","placeholder","onChange","personAdded","Component","Persons","components_AddPerson_AddPerson","onAddedPerson","prs","map","Person_Person","key","id","onRemovedPerson","connect","persons","dispatch","personData","personId","App","containers_Persons","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","initialState","reducer","arguments","length","undefined","action","newPerson","Math","random","Object","objectSpread","concat","filter","store","createStore","ReactDOM","render","react_redux_es","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2a1fc69a.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Person.css';\n\nconst person = (props) => (\n    <div className=\"Person\" onClick={props.clicked}>\n        <h1>{props.name}</h1>\n        <p>Age: {props.age}</p>\n    </div>\n);\n\nexport default person;","import React, { Component }from 'react';\n\nimport './AddPerson.css';\n\n// this is typical use case of local UI state as opposed to using Redux\n// here we combine local state with global Redux state:\n\nclass AddPerson extends Component {\n\n    state = {\n        name: '',\n        age: ''\n    }\n\n    nameChangedHandler = (event) => {\n        this.setState({name: event.target.value})\n    }\n\n    ageChangedHandler = (event) =>  {\n        this.setState({age: event.target.value})\n    }\n\n    render () {\n        return (\n            <div className=\"AddPerson\">\n                <input\n                    type='text'\n                    placeholder='Name'\n                    onChange={this.nameChangedHandler}\n                    value={this.state.name} />\n                <input\n                    type='text'\n                    placeholder='Age'\n                    onChange={this.ageChangedHandler}\n                    value={this.state.age} />\n                <button onClick={() => this.props.personAdded(this.state.name, this.state.age)}>Add Person</button>\n            </div>\n        )\n    }   \n}\n\nexport default AddPerson","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Person from '../components/Person/Person';\nimport AddPerson from '../components/AddPerson/AddPerson';\nimport * as actionTypes from '../store/actions';\n\nclass Persons extends Component {\n    \n    render () {\n        return (\n            <div>\n                <AddPerson personAdded={this.props.onAddedPerson} />\n                {this.props.prs.map(person => (\n                    <Person \n                        key={person.id}\n                        name={person.name} \n                        age={person.age} \n                        clicked={() => this.props.onRemovedPerson(person.id)}/>\n                ))}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        prs: state.persons\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAddedPerson: (name, age) => dispatch({type: actionTypes.ADD_PERSON, personData: {name: name, age: age}}),\n        onRemovedPerson: (id) => dispatch({type: actionTypes.REMOVE_PERSON, personId: id})\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Persons);","export const ADD_PERSON = 'ADD_PERSON';\nexport const REMOVE_PERSON = 'REMOVE_PERSON';","import React, { Component } from 'react';\n\nimport Persons from './containers/Persons';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ol>\n          <li>Turn this app into one which does NOT use local state (in components) but instead uses Redux</li>\n        </ol>\n        <Persons />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from './actions';\n\nconst initialState = {\n    persons: []\n};\n\nconst reducer = ( state = initialState, action ) => {\n    switch ( action.type ) {\n        case actionTypes.ADD_PERSON:\n            const newPerson = {\n                id: Math.random(), // not really unique but good enough here!\n                name: action.personData.name,\n                age: action.personData.age\n            }\n            return {\n                ...state,\n                persons: state.persons.concat( newPerson )\n            }\n        case actionTypes.REMOVE_PERSON:\n            return {\n                ...state,\n                persons: state.persons.filter(person => person.id !== action.personId)\n            }\n    }\n    return state;\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport reducer from './store/reducer';\n\nconst store = createStore(reducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}